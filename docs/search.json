[
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Our Course Project",
    "section": "",
    "text": "I’m honored to be a member of the Data_Vizards project team.\nBelow, you’ll find a brief summary of our project. To access a detailed project description, please go to https://[https://emu-hacettepe-analytics.github.io/emu430-fall2023-team-data_vizards/].\nSummary\n We will carry out our project by considering 2021 internal migration data across Türkiye. Our main focus is In Migration of internal cities. In this regard, migration trends between different regions such as Eastern Anatolia, Southeastern Anatolia, Aegean, Marmara will be determined and migration relations between big cities and other cities will be analyzed in detail. The relationship between population density and migration will be determined by examining migration rates, especially in cities with large populations. Migration trends will be evaluated according to age groups, gender, educational status and reasons for migration. (retirement, appointment, etc.) Also, the economic development level of the economic region will be interpreted according to the labor force, household disposable income, number of enterprises, number of housing sales, etc. This comprehensive analysis will guide our project in understanding Turkey’s migration situation.\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to Melike’s Analytics Lab",
    "section": "",
    "text": "Hello! My name is Melike Nur Kutlusan.\nWelcome to my personal webpage.\nPlease stay tuned to follow my works on data analytics, blog posts, and more.\nThis is my template.\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-2.html",
    "href": "assignments/assignment-2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "Click the see the code\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(stringr)\nlibrary(knitr)\n\n\nlink_1 &lt;- \"https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\nlink_2 &lt;- \"https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\n\nlinked &lt;- c(link_1, link_2)\n\nconvert_to_minutes &lt;- function(duration_i) {\n  hours &lt;- as.integer(str_extract(duration_i, \"\\\\d+(?=h)\"))  # Saatleri al\n  minutes &lt;- as.integer(str_extract(duration_i, \"\\\\d+(?=m)\"))  # Dakikaları al\n  \n  total_minutes &lt;- ifelse(!is.na(hours) && !is.na(minutes), hours * 60 + minutes,\n                          ifelse(!is.na(hours), hours * 60,\n                                 ifelse(!is.na(minutes), minutes,\n                                        NA)))\n  \n  return(ifelse(!is.na(total_minutes), as.character(total_minutes), \"\"))\n}\n\nmovie_data &lt;- data.frame(\n  Title = character(),\n  Year = integer(),\n  Duration = numeric(),\n  Rating = numeric(),\n  Votes = numeric(),\n  stringsAsFactors = FALSE)\n\nfor (url in linked) {\n\nstart_P=read_html(url)\ntitle_names &lt;- start_P |&gt; html_nodes('.ipc-title__text')\ntitle_names &lt;- html_text(title_names)\ntitle_names &lt;- tail(head(title_names,-1),-1)\ntitle_names &lt;- str_split(title_names, \" \", n=2)\ntitle_names &lt;- unlist(lapply(title_names, function(x) {x[2]}))\n\n\nyears &lt;- start_P |&gt; html_nodes('.dli-title-metadata-item:nth-child(1)')\nyears &lt;- html_text(years)\nyears &lt;- substring(years,1,4) %&gt;% as.numeric(years)\n\nrating_data_html &lt;- start_P %&gt;% html_nodes('.ratingGroup--imdb-rating')\nrating_data &lt;- html_text(rating_data_html)\nrating_data &lt;- str_extract(rating_data, \"\\\\d+\\\\.\\\\d+\")\nrating_data &lt;- as.numeric(rating_data)\n\nduration_i &lt;- start_P %&gt;%\nhtml_nodes('.dli-title-metadata-item:nth-child(2)') %&gt;%\nhtml_text()\nconverted_durations &lt;- sapply(duration_i, convert_to_minutes)\nconverted_durations &lt;- as.numeric(converted_durations[!converted_durations == \"\"])\n\nvote&lt;- start_P %&gt;% html_nodes('.cyGaqI')\nvote &lt;- html_text(vote)\nvote &lt;- gsub(\"Votes\",\"\", vote)\nvote &lt;- gsub(\",\",\"\", vote)\nvote &lt;- as.numeric(vote)\n\ncurrent_data &lt;- data.frame(Title = title_names, Year = years, Duration = converted_durations, Rating = rating_data,Votes = vote)\nif (any(is.na(current_data))) {\n  warning(\"Skipping data with missing values.\")\n  next\n}\nmovie_data &lt;- bind_rows(movie_data, current_data)\n}\n\nhead(movie_data)\n\n\n                     Title Year Duration Rating Votes\n1        Kuru Otlar Üstüne 2023      197    8.1  5698\n2                   Siccîn 2014       96    6.0  5128\n3  Istanbul Için Son Çagri 2023       91    5.3  7873\n4 Yedinci Kogustaki Mucize 2019      132    8.2 54445\n5                   Bihter 2023      113    3.6  3490\n6                 Siccin 2 2015       93    6.1  3754"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "B.S., Industrial Engineering, Hacettepe University, Turkey, 2018 - ongoing."
  },
  {
    "objectID": "about.html#employements",
    "href": "about.html#employements",
    "title": "About Me",
    "section": "Employements",
    "text": "Employements\n\nTurkish Airlines, Flight Analyst|PT, 2023 - ongoing"
  },
  {
    "objectID": "about.html#internships",
    "href": "about.html#internships",
    "title": "About Me",
    "section": "Internships",
    "text": "Internships\n\nASELSAN, Production Planning Intern, 2022"
  },
  {
    "objectID": "assignments/assignment-1.html",
    "href": "assignments/assignment-1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "-This assignment has three parts."
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "My Assignments",
    "section": "",
    "text": "On this page, I showcase the assignment I conducted for the Fall 2023 EMU 430 Data Analytics course.\nPlease use left menu to navigate through my assignments.\nThe most recent update to this page was made on November 3, 2023\n\n\n\n Back to top"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Blog",
    "section": "",
    "text": "This page is under construction.\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-1.html#b",
    "href": "assignments/assignment-1.html#b",
    "title": "Assignment 1",
    "section": "(b)",
    "text": "(b)"
  },
  {
    "objectID": "assignments/assignment-1.html#what-is-different-between-r-and-python",
    "href": "assignments/assignment-1.html#what-is-different-between-r-and-python",
    "title": "Assignment 1",
    "section": "What is different between R and Python?",
    "text": "What is different between R and Python?\n\nCreating a range of number\nR uses a colon\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nPython uses range\n\nlist(range(10))\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\nFunctions default argument\nR allows for default arguments regardless or order\n\nf= function(x=2,y,z=5){\n  return(x+y+z)\n}\nf(y=9)\n\n[1] 16\n\n\nPython default arguments must be after non default\n\ndef f(y, x= 6,z=8):\n  return x+y+z\nf(y=7)\n\n21\n\n\n\n\nBooleans\nR all caps TRUE or FALSE, or just the first letter\n\nc(TRUE,F,FALSE,T,F)\n\n[1]  TRUE FALSE FALSE  TRUE FALSE\n\n\nPython True or False with only the first letter capitalized\n\nTrue,False\n\n(True, False)"
  },
  {
    "objectID": "assignments/assignment-2.html#answers-of-the-question-1-and-2",
    "href": "assignments/assignment-2.html#answers-of-the-question-1-and-2",
    "title": "Assignment 2",
    "section": "",
    "text": "Click the see the code\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(stringr)\nlibrary(knitr)\n\n\nlink_1 &lt;- \"https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\nlink_2 &lt;- \"https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\n\nlinked &lt;- c(link_1, link_2)\n\nconvert_to_minutes &lt;- function(duration_i) {\n  hours &lt;- as.integer(str_extract(duration_i, \"\\\\d+(?=h)\"))  # Saatleri al\n  minutes &lt;- as.integer(str_extract(duration_i, \"\\\\d+(?=m)\"))  # Dakikaları al\n  \n  total_minutes &lt;- ifelse(!is.na(hours) && !is.na(minutes), hours * 60 + minutes,\n                          ifelse(!is.na(hours), hours * 60,\n                                 ifelse(!is.na(minutes), minutes,\n                                        NA)))\n  \n  return(ifelse(!is.na(total_minutes), as.character(total_minutes), \"\"))\n}\n\nmovie_data &lt;- data.frame(\n  Title = character(),\n  Year = integer(),\n  Duration = numeric(),\n  Rating = numeric(),\n  Votes = numeric(),\n  stringsAsFactors = FALSE)\n\nfor (url in linked) {\n\nstart_P=read_html(url)\ntitle_names &lt;- start_P |&gt; html_nodes('.ipc-title__text')\ntitle_names &lt;- html_text(title_names)\ntitle_names &lt;- tail(head(title_names,-1),-1)\ntitle_names &lt;- str_split(title_names, \" \", n=2)\ntitle_names &lt;- unlist(lapply(title_names, function(x) {x[2]}))\n\n\nyears &lt;- start_P |&gt; html_nodes('.dli-title-metadata-item:nth-child(1)')\nyears &lt;- html_text(years)\nyears &lt;- substring(years,1,4) %&gt;% as.numeric(years)\n\nrating_data_html &lt;- start_P %&gt;% html_nodes('.ratingGroup--imdb-rating')\nrating_data &lt;- html_text(rating_data_html)\nrating_data &lt;- str_extract(rating_data, \"\\\\d+\\\\.\\\\d+\")\nrating_data &lt;- as.numeric(rating_data)\n\nduration_i &lt;- start_P %&gt;%\nhtml_nodes('.dli-title-metadata-item:nth-child(2)') %&gt;%\nhtml_text()\nconverted_durations &lt;- sapply(duration_i, convert_to_minutes)\nconverted_durations &lt;- as.numeric(converted_durations[!converted_durations == \"\"])\n\nvote&lt;- start_P %&gt;% html_nodes('.cyGaqI')\nvote &lt;- html_text(vote)\nvote &lt;- gsub(\"Votes\",\"\", vote)\nvote &lt;- gsub(\",\",\"\", vote)\nvote &lt;- as.numeric(vote)\n\ncurrent_data &lt;- data.frame(Title = title_names, Year = years, Duration = converted_durations, Rating = rating_data,Votes = vote)\nif (any(is.na(current_data))) {\n  warning(\"Skipping data with missing values.\")\n  next\n}\nmovie_data &lt;- bind_rows(movie_data, current_data)\n}\n\nhead(movie_data)\n\n\n                     Title Year Duration Rating Votes\n1        Kuru Otlar Üstüne 2023      197    8.1  5698\n2                   Siccîn 2014       96    6.0  5128\n3  Istanbul Için Son Çagri 2023       91    5.3  7873\n4 Yedinci Kogustaki Mucize 2019      132    8.2 54445\n5                   Bihter 2023      113    3.6  3490\n6                 Siccin 2 2015       93    6.1  3754"
  },
  {
    "objectID": "assignments/assignment-2.html#question-3",
    "href": "assignments/assignment-2.html#question-3",
    "title": "Assignment 2",
    "section": "Question 3",
    "text": "Question 3\n\n(a)\n\n\nClick the see the code\nsort&lt;- movie_data %&gt;% arrange(desc(Rating))\ntop_5&lt;-head(sort,5)\nbottom_5 &lt;- tail(sort,5)\nprint(top_5)\n\n\n                         Title Year Duration Rating Votes\n1               Hababam Sinifi 1975       87    9.2 42594\n2       CM101MMXI Fundamentals 2013      139    9.1 47043\n3                   Tosun Pasa 1976       90    8.9 24371\n4 Hababam Sinifi Sinifta Kaldi 1975       95    8.9 24412\n5                Süt Kardesler 1976       80    8.8 20917\n\n\nClick the see the code\nprint(bottom_5)\n\n\n                             Title Year Duration Rating Votes\n467                 Cumali Ceber 2 2018      100    1.2 10253\n468                          Müjde 2022       48    1.2  9940\n469              15/07 Safak Vakti 2021       95    1.2 20612\n470                           Reis 2017      108    1.0 73988\n471 Cumali Ceber: Allah Seni Alsin 2017      100    1.0 39272\n\n\nAmong the movies in the Top_5, I watched other movies except Cem Yılmaz’s movie. I was surprised that CM101MMXI Fundamentals was ranked in the top 5 rather than second, but I think the ranking of the other 4 movies is correct.\n\n\n(b)\n\n\nClick the see the code\nselected&lt;- movie_data %&gt;%\n  filter(str_to_lower(Title) %in% c(\"hababam sinifi\", \"g.o.r.a.\"))\n\nprint(selected)\n\n\n           Title Year Duration Rating Votes\n1 Hababam Sinifi 1975       87    9.2 42594\n2       G.O.R.A. 2004      127    8.0 66197\n\n\nBoth films were loved by a large audience in their time and are cult films.\n\n\n(c)\nI didn’t have chance to completed.\n\n\n(d)\n\n\nClick the see the code\nggplot(movie_data, aes(x = Votes, y = Rating)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"red\") +\n  labs(title = \"Correlation between Votes and Ratings\",\n       x = \"Votes\",\n       y = \"Ratings\")\n\n\n\n\n\nClick the see the code\ncor(movie_data$Votes, movie_data$Rating)\n\n\n[1] 0.1318886\n\n\nThere is positive correlation between ratins and votes but not a strong correlation, its relatively week because the value of the correlation is 0.1318877.\n\n\n(e)\n\n\nClick the see the code\nggplot(movie_data, aes(x = Duration, y = Rating)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"orange\") +\n  labs(title = \"Correlation between Votes and Ratings\",\n       x = \"Votes\",\n       y = \"Ratings\")\n\n\n\n\n\nClick the see the code\ncor(movie_data$Duration, movie_data$Rating)\n\n\n[1] 0.03303303\n\n\nThere is a week positive correlation between ratings and durations because the value of the correlation is 0.03303303"
  }
]